import express from 'express'
import multer from 'multer'
import path from 'path'
import { fileURLToPath } from 'url'
import OpenAI from 'openai'
import { supabase } from '../config/supabase.js'

const router = express.Router()
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// Initialize OpenAI only if API key is provided
let openai = null
if (process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY !== 'sk-placeholder-key-get-real-key-from-openai') {
  openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  })
} else {
  console.warn('⚠️  OpenAI API key not configured. Voice transcription will use mock responses.')
}

// Configure multer for audio file uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, path.join(__dirname, '../uploads'))
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9)
    cb(null, `voice-order-${uniqueSuffix}${path.extname(file.originalname)}`)
  }
})

const upload = multer({
  storage,
  limits: {
    fileSize: parseInt(process.env.MAX_FILE_SIZE) || 10 * 1024 * 1024, // 10MB
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = ['audio/webm', 'audio/wav', 'audio/mp3', 'audio/m4a', 'audio/ogg']
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true)
    } else {
      cb(new Error('Invalid file type. Only audio files are allowed.'), false)
    }
  }
})

// Helper function to find or create a pool
const findOrCreatePool = async (location, supplierId = null) => {
  try {
    // Try to find existing pool in the area
    let pool = await Pool.findOne({
      'location.city': new RegExp(location.city || 'Mumbai', 'i'),
      'location.area': new RegExp(location.area || location.address, 'i'),
      status: { $in: ['collecting', 'ready'] }
    })

    // If no pool exists, create a new one
    if (!pool) {
      pool = new Pool({
        location: {
          address: location.address || location,
          city: location.city || 'Mumbai',
          area: location.area || location.address
        },
        supplierId,
        status: 'collecting',
        threshold: {
          minOrders: 3,
          minValue: 500,
          maxWaitTime: 120
        }
      })
      await pool.save()
    }

    return pool
  } catch (error) {
    console.error('Error finding/creating pool:', error)
    throw error
  }
}

// Helper function to parse location
const parseLocation = (locationString) => {
  // Simple location parsing - can be enhanced
  const parts = locationString.split(',').map(s => s.trim())
  
  if (parts.length >= 2) {
    return {
      address: locationString,
      area: parts[0],
      city: parts[1] || 'Mumbai'
    }
  }
  
  return {
    address: locationString,
    city: 'Mumbai',
    area: locationString
  }
}

// Process voice order
router.post('/process', upload.single('audio'), async (req, res) => {
  try {
    const { vendorPhone, location } = req.body
    const audioFile = req.file

    if (!audioFile) {
      return res.status(400).json({
        success: false,
        error: 'No audio file provided'
      })
    }

    if (!vendorPhone) {
      return res.status(400).json({
        success: false,
        error: 'Vendor phone number is required'
      })
    }

    console.log(`Processing voice order for vendor: ${vendorPhone}`)

    // Check if OpenAI is available
    if (!openai) {
      // Mock response for development when OpenAI is not configured
      const mockOrder = {
        orderId: `mock-${Date.now()}`,
        vendorPhone,
        items: [
          { item: 'rice', quantity: '5', unit: 'kg' },
          { item: 'dal', quantity: '2', unit: 'kg' },
          { item: 'onions', quantity: '3', unit: 'kg' }
        ],
        transcript: 'Mock transcript: 5 kg rice, 2 kg dal, 3 kg onions',
        confidence: 0.95,
        totalEstimate: 450,
        status: 'pending',
        createdAt: new Date()
      }

      console.log('Using mock data - OpenAI not configured')
      return res.json({
        success: true,
        data: mockOrder
      })
    }

    // Step 1: Convert speech to text using Whisper
    const transcription = await openai.audio.transcriptions.create({
      file: require('fs').createReadStream(audioFile.path),
      model: 'whisper-1',
      language: 'hi', // Hindi as primary, but Whisper auto-detects other languages
      response_format: 'verbose_json', // Get more detailed response
      temperature: 0.0 // More deterministic output
    })

    const transcript = transcription.text
    const confidence = transcription.segments ? 
      transcription.segments.reduce((acc, seg) => acc + seg.avg_logprob, 0) / transcription.segments.length : 0.8
    
    console.log(`Transcript: ${transcript}`)
    console.log(`Language detected: ${transcription.language || 'hindi'}`)
    console.log(`Confidence: ${confidence}`)

    // Step 2: Extract order details using GPT
    const completion = await openai.chat.completions.create({
      model: 'gpt-4', // Using GPT-4 for better multilingual understanding
      messages: [
        {
          role: 'system',
          content: `You are a helpful assistant that extracts food/grocery items from Indian vendor orders in multiple Indian languages (Hindi, English, Tamil, Telugu, Bengali, Marathi, etc.). 
          
          Parse the transcript and extract items with quantities. Handle mixed language orders and local language terms.
          
          Common items and their local names:
          - Rice: चावल (chawal), rice, அரிசி (arisi), బియ్యం (biryani)
          - Lentils: दाल (dal), lentils, பருப்பு (paruppu), పప్పు (pappu)
          - Oil: तेल (tel), oil, எண்ணெய் (ennai), నూనె (noone)
          - Onions: प्याज (pyaz), onions, வெங்காயம் (vengayam), ఉల్లిపాయ (ullipaya)
          - Potatoes: आलू (aloo), potatoes, உருளைக்கிழங்கு (urulaikilangu), బంగాళదుంప (bangaladumpa)
          
          Return a JSON object with an "items" array where each item has: item (in English), quantity, unit.
          If quantities are unclear, use reasonable defaults (1-5 kg for most items).
          
          Example output:
          {
            "items": [
              {"item": "rice", "quantity": "5", "unit": "kg"},
              {"item": "dal", "quantity": "2", "unit": "kg"}
            ],
            "confidence": 0.9,
            "language_detected": "hindi",
            "original_terms": ["चावल", "दाल"]
          }`
        },
        {
          role: 'user',
          content: `Extract items from this order: "${transcript}"`
        }
      ],
      temperature: 0.2 // Lower temperature for more consistent results
    })

    let orderData
    try {
      orderData = JSON.parse(completion.choices[0].message.content)
    } catch (parseError) {
      console.error('Error parsing GPT response:', parseError)
      // Fallback: simple text parsing
      orderData = {
        items: [{ item: transcript, quantity: '1', unit: 'kg' }],
        confidence: 0.5
      }
    }

    // Step 3: Calculate estimated value
    const priceMap = {
      'rice': 80, 'chawal': 80, 'dal': 120, 'oil': 150, 'tel': 150,
      'onion': 40, 'pyaz': 40, 'potato': 30, 'aloo': 30,
      'tomato': 50, 'garlic': 200, 'ginger': 180, 'wheat': 60
    }

    let estimatedValue = 0
    orderData.items.forEach(item => {
      const quantity = parseFloat(item.quantity) || 1
      const price = priceMap[item.item.toLowerCase()] || 50
      estimatedValue += quantity * price
    })

    // Step 4: Parse location
    const parsedLocation = parseLocation(location)

    // Step 5: Create order
    const order = new Order({
      vendorPhone,
      items: orderData.items,
      location: parsedLocation,
      transcript,
      confidence: confidence || orderData.confidence || 0.8,
      estimatedValue,
      status: 'pending',
      metadata: {
        audioFileUrl: `/uploads/${audioFile.filename}`,
        processingTime: Date.now() - Date.parse(req.headers['x-request-start'] || Date.now()),
        languageDetected: transcription.language || orderData.language_detected || 'hindi',
        originalTerms: orderData.original_terms || [],
        whisperConfidence: confidence
      }
    })

    await order.save()

    // Step 6: Try to add to existing pool or create new one
    try {
      const pool = await findOrCreatePool(parsedLocation)
      
      // Add order to pool
      await pool.addOrder(order._id, estimatedValue)
      
      // Update order with pool ID
      order.poolId = pool._id
      order.status = 'pooled'
      await order.save()

      console.log(`Order added to pool: ${pool._id}`)

      // Emit real-time updates
      if (req.app.locals.io) {
        req.app.locals.io.emitOrderUpdate(order)
        req.app.locals.io.emitOrderPooled(order, pool._id)
        
        // Check if pool is ready
        if (pool.isReadyForDispatch()) {
          req.app.locals.io.emitPoolReady(pool)
        }
      }
    } catch (poolError) {
      console.error('Error handling pool:', poolError)
      // Order still created, just not pooled yet
    }

    // Step 7: Send response
    res.json({
      success: true,
      data: {
        orderId: order._id,
        transcript,
        items: orderData.items,
        location: parsedLocation,
        confidence: orderData.confidence,
        estimatedValue,
        poolId: order.poolId,
        languageDetected: transcription.language || orderData.language_detected || 'hindi'
      }
    })

  } catch (error) {
    console.error('Voice processing error:', error)
    res.status(500).json({
      success: false,
      error: 'Failed to process voice order',
      details: error.message
    })
  }
})

// Process text order (alternative to voice)
router.post('/process-text', async (req, res) => {
  try {
    const { text, vendorPhone, location } = req.body

    if (!text || !vendorPhone) {
      return res.status(400).json({
        success: false,
        error: 'Text and vendor phone are required'
      })
    }

    // Check if OpenAI is available
    if (!openai) {
      // Mock response for development
      const mockItems = [
        { item: 'rice', quantity: '5', unit: 'kg' },
        { item: 'dal', quantity: '2', unit: 'kg' }
      ]
      
      return res.json({
        success: true,
        data: {
          items: mockItems,
          confidence: 0.9,
          transcript: text
        }
      })
    }

    // Use GPT to parse text order
    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: `Extract food/grocery items from vendor orders. Return JSON with items array.
          Each item should have: item, quantity, unit.
          
          Example: {"items": [{"item": "rice", "quantity": "5", "unit": "kg"}], "confidence": 0.9}`
        },
        {
          role: 'user',
          content: `Extract items from: "${text}"`
        }
      ],
      temperature: 0.3
    })

    let orderData
    try {
      orderData = JSON.parse(completion.choices[0].message.content)
    } catch (parseError) {
      // Simple fallback parsing
      const items = text.split(',').map(item => {
        const trimmed = item.trim()
        const match = trimmed.match(/(\d+)\s*(.+)/)
        if (match) {
          return { quantity: match[1], item: match[2], unit: 'kg' }
        }
        return { quantity: '1', item: trimmed, unit: 'kg' }
      })
      orderData = { items, confidence: 0.6 }
    }

    // Calculate estimated value
    const priceMap = {
      'rice': 80, 'dal': 120, 'oil': 150, 'wheat': 60, 'sugar': 45
    }

    let estimatedValue = 0
    orderData.items.forEach(item => {
      const quantity = parseFloat(item.quantity) || 1
      const price = priceMap[item.item.toLowerCase()] || 50
      estimatedValue += quantity * price
    })

    const parsedLocation = parseLocation(location)

    res.json({
      success: true,
      data: {
        items: orderData.items,
        location: parsedLocation,
        estimatedValue,
        confidence: orderData.confidence
      }
    })

  } catch (error) {
    console.error('Text processing error:', error)
    res.status(500).json({
      success: false,
      error: 'Failed to process text order',
      details: error.message
    })
  }
})

// Health check for voice service
router.get('/health', (req, res) => {
  res.json({
    success: true,
    service: 'Voice Processing',
    openai: !!process.env.OPENAI_API_KEY,
    timestamp: new Date().toISOString()
  })
})

export default router
